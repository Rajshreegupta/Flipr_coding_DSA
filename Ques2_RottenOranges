from collections import deque
def orangesRotting(grid):
    cnt=0
    moves_x=[0, 0, -1, 1]
    moves_y=[1, -1, 0, 0]
    queue=deque()
    queue.append([-1, -1])
    rows=len(grid)
    cols=len(grid[0])
    flag=0
    for i in range(rows):
        for j in range(cols):
            if grid[i][j]==2:
                queue.append([i, j])
            if grid[i][j]==1:
                flag=1
    if flag==0:
        return 0
    while(len(queue)>1):
        cnt+=1
        queue.popleft()
        queue.append([-1, -1])
        while(queue[0]!=[-1, -1]):
            n=queue.popleft()
            for i in range(4):
                new_x=n[0]+moves_x[i]
                new_y=n[1]+moves_y[i]
                if new_x>=0 and new_x<rows and new_y>=0 and new_y<cols and grid[new_x][new_y]==1:
                    queue.append([new_x, new_y])
                    grid[new_x][new_y]=2

    return cnt-1, grid

grid=[[2, 1, 0, 2, 1],
[0, 0, 1, 2, 1],
[1, 0, 0, 2, 1]];

# grid= [[2, 1, 0, 2, 1],
# [1, 0, 1, 2, 1],
# [1, 0, 0, 2, 1],
# [1, 0, 0, 0, 0],
# [1, 1, 1, 1, 1],
# [1, 0, 0, 0, 1],
# [1, 0, 1, 0, 1]];

count, newgrid = orangesRotting(grid)
print("time frames: ",count)
rows=len(newgrid)
cols=len(newgrid[0])
rotten=0
fresh=0
for i in range(rows):
    for j in range(cols):
        if newgrid[i][j]==1:
            fresh+=1
        elif newgrid[i][j]==2:
            rotten+=1
print("fresh oranges: ", fresh)
print("Rotten oranges: ", rotten)
